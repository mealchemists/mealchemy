name: Mealchemy-CI-Staging

on: 
    pull_request:
        branches:
            - dev-staging

jobs:
    cancel-previous-runs:
        name: Cancel ongoing job runs for this PR
        runs-on: ubuntu-latest
        permissions: 
            actions: write # this is required for cancel-workflow-action to work
        steps:
          - uses: styfle/cancel-workflow-action@0.12.0
            with:
                access_token: ${{ secrets.GITHUB_TOKEN }}


    lint-format-python:
        name: Format and lint code
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Python setup
            run: |
                python -m pip install --upgrade pip
                pip install --no-cache-dir -r backend/requirements.txt
                pip install black
            # run: |
            #     python -m pip install --upgrade pip
            #     pip install --no-cache-dir -r backend/requirements.txt
            #     pip install black flake8 isort

          - name: Cache Python dependencies
            uses: actions/cache@v4
            with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
                restore-keys: |
                    ${{ runner.os }}-pip-

          - name: Run Python formatters
            run: |
                black .
            # run: |
            #     black .
            #     isort --check .
            #     flake8 .

        # Hide for now... need to focus on backend first of all
        #   - name: Install JavaScript dependencies
        #     run: npm ci

        #   - name: Run JavaScript formatters & linters
        #     run: |
        #         npx eslint . --max-warnings=0
        #         npx prettier --check .


    test:
        name: "Run unit tests"
        runs-on: ubuntu-latest
        needs: lint-format-python
        strategy:
            fail-fast: true
            matrix:
                python-version: [3.12]

        services:
            postgres:
                image: postgres:latest
                env:
                    # NOTE: This should match whatever you specify under 'db'
                    # in docker-compose.yaml.
                    POSTGRES_DB: test_db
                    POSTGRES_USER: admin
                    POSTGRES_PASSWORD: root
                    POSTGRES_HOST: localhost
                ports:
                    - 5432:5432
                # TODO: May need to look options for Postgres in the future.
        steps:
            - name: Checkout code...
              uses: actions/checkout@v4

            - name: Setup Python...
              # GitHub Actions jobs already run in a clean Ubuntu environment
              # by default, so that we don't have to install as many manual dependencies.
              uses: actions/setup-python@v5
              with:
                python-version: "3.12"

            - name: Install Python dependencies...
              # --no-cache-dir since we will start from fresh each time
              working-directory: ./backend/
              run: |
                python -m pip install --upgrade pip
                pip install --no-cache-dir -r requirements.txt

            - name: Cache Python dependencies...
              uses: actions/cache@v4
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Wait for database to be ready...
              run: |
                until pg_isready -h localhost -p 5432 -U django; do
                    echo "Waiting for database..."
                    sleep 2
                done

            - name: Run database migrations
              working-directory: ./backend/
              env:
                DATABASE_URL: postgres://django:password@localhost:5432/test_db
              run: |
                python manage.py makemigrations
                python manage.py migrate

            - name: Run tests
              working-directory: ./backend/
              env:
                DATABASE_URL: postgres://django:password@localhost:5432/test_db
              run: |
                python manage.py test
