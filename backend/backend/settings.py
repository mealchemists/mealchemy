"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import io
import os
from pathlib import Path
from datetime import timedelta
from urllib.parse import urlparse

import environ
import google.auth
from google.cloud import secretmanager


# Attempt to load the Project ID into the environment, safely failing on error.
if os.getenv("PROD", "False").lower() == "true":
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


    # [START cloudrun_django_secret_config]
    # SECURITY WARNING: don't run with debug turned on in production!
    # Change this to "False" when you are ready for production
    env = environ.Env(DEBUG=(bool, True))
    env_file = os.path.join(BASE_DIR, ".env")

    try:
        _, os.environ["GOOGLE_CLOUD_PROJECT"] = google.auth.default()
    except google.auth.exceptions.DefaultCredentialsError:
        pass
    
else:
    BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))

    env = environ.Env(DEBUG=(bool, True))
    env_file = os.path.join(BASE_DIR, ".env")
    

if os.path.isfile(env_file):
    # Use a local secret file, if provided
    env.read_env(env_file)
elif os.environ.get("GOOGLE_CLOUD_PROJECT", None):
    # Pull secrets from Secret Manager
    project_id = os.environ.get("GOOGLE_CLOUD_PROJECT")

    client = secretmanager.SecretManagerServiceClient()
    settings_name = os.environ.get("SETTINGS_NAME", "django_settings")
    name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
    env.read_env(io.StringIO(payload))
else:
    raise Exception("No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found.")


SECRET_KEY = env("SECRET_KEY")

DEBUG = env("DEBUG")
ROOT_URLCONF = "backend.urls"

CLOUDRUN_SERVICE_URLS = env("CLOUDRUN_SERVICE_URLS", default=None)
if CLOUDRUN_SERVICE_URLS:
    CSRF_TRUSTED_ORIGINS = env("CLOUDRUN_SERVICE_URLS").split(",")
    # Remove the scheme from URLs for ALLOWED_HOSTS
    ALLOWED_HOSTS = [urlparse(url).netloc for url in CSRF_TRUSTED_ORIGINS]

    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
else:
    ALLOWED_HOSTS = ["*"]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "django_filters",
    "rest_framework",
    "backend.apps.recipes",
    "backend.apps.meal_plan",
    "backend.apps.user",
    "backend.apps.shopping_list",
    "rest_framework_simplejwt",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


if os.getenv("DATABASE_URL"):
    DATABASES = {
        "default": env.db("DATABASE_URL")
    }
    if os.getenv("USE_CLOUD_SQL_AUTH_PROXY", None):
        DATABASES["default"]["HOST"] = "127.0.0.1"
        DATABASES["default"]["PORT"] = 3306
    print("Database: database_url\n")
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
    print("Database: SQLITE3\n")

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
        "rest_framework.permissions.AllowAny",
    ],
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

STATIC_URL = "/static/"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": "your-secret-key",
}


# Email Authentication
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = os.getenv("EMAIL_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_PASSWORD")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_EMAIL")
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

ALLOWED_HOSTS = [
    "backend-service-102081122635.us-west1.run.app",
    "localhost",
    "127.0.0.1",
    "frontend-service-102081122635.us-west1.run.app",
    "consumer-102081122635.us-central1.run.app",
    "api.mealchemy.app",
    "mealchemy.app",
    "backend",
]
CSRF_TRUSTED_ORIGINS = [
    "https://backend-service-102081122635.us-west1.run.app",
    "https://react-service-102081122635.us-west1.run.app",
    "http://localhost:3000",
    "http://localhost:5000",
    "https://consumer-102081122635.us-central1.run.app",
    "https://www.mealchemy.app",
    "https://mealchemy.app",
    "https://api.mealchemy.app",
]
CORS_ALLOWED_ORIGINS = [
    "https://backend-service-102081122635.us-west1.run.app",
    "https://react-service-102081122635.us-west1.run.app",
    "http://localhost:3000",
    "http://localhost:5000",
    "https://consumer-102081122635.us-central1.run.app",
    "https://www.mealchemy.app",
    "https://mealchemy.app",
    "https://api.mealchemy.app",
]
CORS_ALLOW_CREDENTIALS = True

if os.getenv("PROD", "False").lower() == "true":
    SESSION_COOKIE_SAMESITE = "None"
    SESSION_COOKIE_SECURE = True  
    CSRF_COOKIE_SAMESITE = "None"  
    CSRF_COOKIE_SECURE = True 
    CSRF_COOKIE_DOMAIN = "mealchemy.app"

